// Package {{PACKAGE}}
// @sparkle-generated
package {{PACKAGE}}

import (
    service {{MAIN_SERVICE_PACKAGE_PATH}}
	"github.com/gin-gonic/gin"
	"net/http"
	"encoding/json"
	"strings"
	"reflect"
)

type Service struct {
    mainService *service.Service
	gin *gin.Engine
}

func New(gin *gin.Engine, service *service.Service) *Service {
	return &Service{
	    mainService: service,
		gin: gin,
	}
}

type Error struct {
	Message string
	Success int
}

func showError(c *gin.Context, err error) {
	statusCode := http.StatusInternalServerError

    if customError, ok := err.(*service.Error); ok {
        statusCode = customError.StatusCode
    }

    c.JSON(statusCode, Error{Message: err.Error(), Success: 0})
}

func setFieldsFromURL(request interface{}, c *gin.Context) {
	reqValue := reflect.ValueOf(request).Elem()
	reqType := reflect.TypeOf(request).Elem()

	for i := 0; i < reqType.NumField(); i++ {
		field := reqType.Field(i)
		jsonTag := field.Tag.Get("json")
		jsonTags := strings.Split(jsonTag, ",")
		fieldName := jsonTags[0]
		fieldValue := reqValue.FieldByName(field.Name)

		if paramValue := c.Param(fieldName); paramValue != "" {
			fieldValue.SetString(paramValue)
		}
	}
}

func (s *Service) Init() {
    {{ENDPOINTS}}
}